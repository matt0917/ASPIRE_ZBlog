@page "/articles"
@using Microsoft.EntityFrameworkCore
@using ZBlogApp.Library
@inject ArticleApiClient ApiClient
@inject NavigationManager NavigationManager

<PageTitle>Articles</PageTitle>

<h1 class="text-center text-decoration-underline">Articles</h1>
<br mh-5 />

<h1 class="mb-4">Articles</h1>

<div>
    Items per page:
    <select @bind="pagination.ItemsPerPage">
        <option>2</option>
        <option>5</option>
        <option>10</option>
        <option>15</option>
        <option>20</option>
        <option>25</option>
    </select>
</div>

<div class="mt-3 d-flex align-items-center">
    <i class="bi bi-funnel me-3"></i> <span class="me-3">Keyword Filter :</span>
    <input type="search" class="form-control w-50" @bind="keywordFilter" @bind:event="oninput" placeholder="Search for a keyword" />
</div>

<br>

@if (IQueryableArticles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid class="table main" Items="@filteredArticles" ResizableColumns="true" Pagination="@pagination">
        <PropertyColumn Property="@(context => context.Title)" Sortable="true" title="Title" class="title-column">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="titleFilter" @bind:event="oninput" placeholder="Search for a title..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
            <TemplateColumn Title="Body" class="body-column" Sortable="true">
                <ChildContent>
                    <div>
                        @context.Body?.Substring(0, Math.Min(100, context.Body.Length)) 
                        <NavLink class="btn-custom" href="@($"/articles/{context.Id}")">
                            <span style="font-weight: bold; font-style: italic;">More ...</span>
                        </NavLink>
                    </div>
                </ChildContent>
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="bodyFilter" @bind:event="oninput" placeholder="Search in body..." />
                    </div>
                </ColumnOptions>
            </TemplateColumn>
        <PropertyColumn Property="@(context => context.ContributorUserName)" Sortable="true" title="Author">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="authorFilter" @bind:event="oninput" placeholder="Search for an author..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(context => context.CreateDate)" Sortable="true" title="Creation Date" />
        <PropertyColumn Property="@(context => context.StartDate)" Sortable="true" title="Start Date" />
        <PropertyColumn Property="@(context => context.EndDate)" Sortable="true" title="End Date" />
    </QuickGrid>
    <Paginator State="@pagination"></Paginator>
}


@code 
{
    private IQueryable<Article>? IQueryableArticles;
    string keywordFilter = string.Empty;
    string titleFilter = string.Empty;
    string bodyFilter = string.Empty;
    string authorFilter = string.Empty;

    IQueryable<Article>? filteredArticles => IQueryableArticles?.Where(a => (a.Title != null && a.Title.Contains(keywordFilter, StringComparison.CurrentCultureIgnoreCase)) && (a.Body != null && a.Body.Contains(keywordFilter, StringComparison.CurrentCultureIgnoreCase)) && (a.ContributorUserName != null && a.ContributorUserName.Contains(keywordFilter, StringComparison.CurrentCultureIgnoreCase)))
        .Where(a => string.IsNullOrWhiteSpace(titleFilter) || (a.Title != null && a.Title.Contains(titleFilter, StringComparison.CurrentCultureIgnoreCase)))
        .Where(a => string.IsNullOrWhiteSpace(bodyFilter) || (a.Body != null && a.Body.Contains(bodyFilter, StringComparison.CurrentCultureIgnoreCase)))
        .Where(a => string.IsNullOrWhiteSpace(authorFilter) || (a.ContributorUserName != null && a.ContributorUserName.Contains(authorFilter, StringComparison.CurrentCultureIgnoreCase)));

    protected override async Task OnInitializedAsync()
    {
        IQueryableArticles = await ApiClient.GetArticleAsync();
        Console.WriteLine($"Total articles: {IQueryableArticles.Count()}");
        @* for (int i = 0; i < IQueryableArticles.Count(); i++)
        {
            Console.WriteLine($"article: ******************* {IQueryableArticles.ElementAt(i).Title}");
        } *@

        StateHasChanged();
    }

    private PaginationState pagination = new PaginationState{ ItemsPerPage = 5 };

}
