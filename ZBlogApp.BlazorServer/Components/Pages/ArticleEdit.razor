@page "/articles/edit/{ArticleId}"

@using ZBlogApp.Library
@using ZBlogApp.BlazorServer.Data
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext
@inject IJSRuntime JS
@rendermode InteractiveServer


@if (IsLoading)
{
    <p>Loading...</p>
}
else
{
    <h1>Edit Article</h1>
    <div class="card p-3" style="max-width: 60%;">
        @if (articleModel != null)
        {
            <EditForm Model="articleModel" OnValidSubmit="HandleSubmit" FormName="EditArticleForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <input type="hidden" @bind="articleModel.Id" />

                <div class="form-group">
                    <label>Title</label>
                    <InputText class="form-control" @bind-Value="articleModel.Title" />
                </div>

                <div class="form-group">
                    <label>Body</label>
                    <InputTextArea class="form-control" style="min-height: 300px;" @bind-Value="articleModel.Body" />
                </div>

                <div class="form-group">
                    <label>Start Date</label>
                    <InputDate class="form-control" @bind-Value="articleModel.StartDate" />
                </div>

                <div class="form-group">
                    <label>End Date</label>
                    <InputDate class="form-control" @bind-Value="articleModel.EndDate" />
                </div>

                <div class="form-group mt-3">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <NavLink class="btn btn-secondary" href="/articles">Cancel</NavLink>
                </div>
            </EditForm>
        }
    </div>
}

@code {
    [Parameter] public string ArticleId { get; set; } = string.Empty;
    private Article? articleModel { get; set; }
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        articleModel = await DbContext.Articles.FindAsync(ArticleId);
        if (articleModel == null)
        {
            Navigation.NavigateTo("/articles");
        }
        else
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(articleModel?.Body))
        {
            // sanitize html
            articleModel.Body = Helper.SanitizeHtml(articleModel.Body);
        }
        await DbContext.SaveChangesAsync();
        Navigation.NavigateTo("/articles");
    }

    // tinymce editor
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("tinymceInterop.initEditor", "editor");
        }
    }
}